//Rastin Hosseini
//LostMyMind
//inspired by one of the examples on 
//the p5.js tutorial website

let t = 0
class MySketch extends React.Component {

 setup(p5, whereToPlot) {
   p5.createCanvas(500, 500).parent(whereToPlot)
   // the first but definitely not the
   //last time you see random function
   //in this code
   p5.background(250,p5.random(50),250);
   //a multiply of your theta wave
   //controls the colour and
   // of course some random colours 
   p5.fill (p5.random(150),THETA*60,p5.random(180))
   //reduced the framerate b/c either
   //I have not slept for 2 days
   // or 60fps is too high for this
   p5.frameRate (30)
   
 } 
 
 draw(p5) {
   //just to make life
   //a bit easier
   HEIGHT = p5.height
   WIDTH = p5.width;
   MOUSEX = p5.mouseX;
   MOUSEY = p5.mouseY;
   THETA = brain.current.bands.data.theta[3]
   ALPHA = brain.current.bands.data.alpha[0];
   //if you want you could
   //inspect the data stream
   console.log(brain.current.bands.data.theta[3])
   console.log(brain.current.bands.data.alpha[0])
   
   //do not change 30 or else
   // the code will break
   for (let x = ALPHA; x <= WIDTH; x = x + 30) {
    for (let y = 0; y <= HEIGHT; y = y + 30) {
   
   //put the mouse functions in to
   //pay hommage to the og code
   //and give the program another dimension 
   //so move the mouse around! 
    const xAngle = p5.map(MOUSEX, 0, WIDTH, -4 * (22/7), 4 * (22/7), true);
      const yAngle = p5.map(MOUSEY, 0, HEIGHT, -4 * (22/7), 4 * (22/7), true);
      
      const angle = xAngle * (x / WIDTH) + yAngle * (y / HEIGHT);
      
      //fun little fact:
      //Pi was not defined
      //so I just used 22/7 instead
      //not to toot my own horn
      // but that was kinda impressive
      // or I just couldn't find Pi
      const myX = x + 20 * p5.cos(2 * (22/7) * t + angle);
      const myY = y + 20 * p5.sin(2 * (22/7) * t + angle);
      
      //size of the ellipses are
      //dependent on your alpha
      //it might be blasphemous
      //but you could try
      //OTHER shapes
      p5.ellipse(myX, myY, ALPHA*5)
      
      //t is time btw
      //decided on 0.09
      //after trial and error
      t = t + 0.09
      
      }
      }
      }
      
//isn't it annoying
//that we have to use
//this function for things
//to show up?
render() {
   return (
      <Sketch
        setup={this.setup}
        draw={this.draw}
      />
   )
 }
 }


render (
 <MySketch />
)
